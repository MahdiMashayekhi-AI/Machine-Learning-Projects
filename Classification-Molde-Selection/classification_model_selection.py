# -*- coding: utf-8 -*-
"""Classification_Model_Selection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-3EMxevOlGqtQFjM98Gt_sI__C1IL2kO

# Classification Model Selection

## Import libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""## Import dataset"""

from sklearn.datasets import load_iris
iris = load_iris()
X = iris.data
y = iris.target

"""## Spliting dataset into training set and test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

X_train.shape

X_test.shape

y_train.shape

y_test.shape

"""## Training the model"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis

knn = KNeighborsClassifier(n_neighbors=3)
dt = DecisionTreeClassifier(criterion='entropy')
lr = LogisticRegression()
rf = RandomForestClassifier(n_estimators=50)
ab = AdaBoostClassifier()
gb = GradientBoostingClassifier()
gnb = GaussianNB()
svc = SVC(kernel='rbf')
qda = QuadraticDiscriminantAnalysis()
lda = LinearDiscriminantAnalysis()

knn.fit(X_train, y_train)
dt.fit(X_train, y_train)
lr.fit(X_train, y_train)
rf.fit(X_train, y_train)
ab.fit(X_train, y_train)
gb.fit(X_train, y_train)
gnb.fit(X_train, y_train)
svc.fit(X_train, y_train)
qda.fit(X_train, y_train)
lda.fit(X_train, y_train)

"""## Predicting the model"""

y_pred_knn = knn.predict(X_test)
y_pred_dt = dt.predict(X_test)
y_pred_lr = lr.predict(X_test)
y_pred_rf = rf.predict(X_test)
y_pred_ab = ab.predict(X_test)
y_pred_gb = gb.predict(X_test)
y_pred_gnb = gnb.predict(X_test)
y_pred_svc = svc.predict(X_test)
y_pred_qda = qda.predict(X_test)
y_pred_lda = lda.predict(X_test)

from sklearn.metrics import confusion_matrix, accuracy_score
label = ['KNN', 'DecisionTree', 'LogisticRegression', ' RandomForest',
         'AdaBoost', 'GradientBoosting', 'GaussianNB', 'SVC', 'QDA', 'LDA']
y_preds = [y_pred_knn, y_pred_dt, y_pred_lr, y_pred_rf, y_pred_ab,
           y_pred_gb, y_pred_gnb, y_pred_svc, y_pred_qda, y_pred_lda]

for i, y_pred in enumerate(y_preds):
  cm = confusion_matrix(y_test, y_pred)
  score = accuracy_score(y_test, y_pred)
  print(cm)
  print("'{}' Accuracy Score: {} %".format(label[i], score*100))