# -*- coding: utf-8 -*-
"""Image_Classification_SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q_qjSYUvtBlOVm1fuY8r4fODsRxxoRm3

# Image Classification with SVM

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""# Importing the dataset"""

from sklearn.datasets import fetch_openml
X, y = fetch_openml('CIFAR_10_small', version=1, return_X_y=True)

"""## Preprocess data"""

X = X / 255.0 # scale pixel values to range of 0 to 1
X = np.reshape(X, (X.shape[0], -1)) # flatten images to 1D vectors
y = y.astype(np.int) # convert labels to integers

"""## Split data into train and test sets"""

train_size = 50000
X_train, y_train = X[:train_size], y[:train_size]
X_test, y_test = X[train_size:], y[train_size:]

"""## Define pipeline for feature extraction and SVM model"""

from sklearn.pipeline import Pipeline
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn import svm

pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('pca', PCA(n_components=100)),
    ('svm', svm.SVC(kernel='rbf'))
])

"""## Define grid of hyperparameters to search over

"""

param_grid = {
    'svm__C': [0.1, 1, 10],
    'svm__gamma': [0.01, 0.1, 1],
}

"""## Train model using grid search to find optimal hyperparameters"""

from sklearn.model_selection import GridSearchCV
grid_search = GridSearchCV(pipeline, param_grid, cv=3, n_jobs=-1)
grid_search.fit(X_train, y_train)

"""## Evaluate model on test set"""

from sklearn import metrics
y_pred = grid_search.predict(X_test)
accuracy = metrics.accuracy_score(y_test, y_pred)
precision = metrics.precision_score(y_test, y_pred, average='macro')
recall = metrics.recall_score(y_test, y_pred, average='macro')
f1_score = metrics.f1_score(y_test, y_pred, average='macro')
confusion_matrix = metrics.confusion_matrix(y_test, y_pred)

"""## Result for evaluating"""

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1_score)
print("Confusion Matrix:\n", confusion_matrix)

"""## Visualising"""

fig, axs = plt.subplots(2, 5, figsize=(10, 5))
for i in range(2):
    for j in range(5):
        index = np.random.randint(len(X_test))
        image = X_test[index].reshape((32, 32, 3))
        label = y_pred[index]
        axs[i][j].imshow(image)
        axs[i][j].set_title("Predicted Label: {}".format(label))
plt.show()