# -*- coding: utf-8 -*-
"""Book_Recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CFjHUl0vndxc75Z7GevvOTTgr2kZUC3f

# Book Recommender

## Importing the libraries
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

"""## Importing the dataset"""

dataset = pd.read_csv('books.csv', error_bad_lines=False)

dataset.head(10)

dataset.info()

dataset.columns

dataset.isnull().sum()

dataset.describe().T

top_data = dataset[dataset['ratings_count'] > 1000000 ]
top_data = top_data.sort_values(by='average_rating')

plt.style.use('seaborn-whitegrid')
plt.figure(figsize=(10, 10))
data = top_data.head(20)
sns.barplot(x='average_rating', y='title', data=data, palette='inferno');

"""## Data Exploration"""

best_books = dataset.groupby('authors')['title'].count().reset_index().sort_values('title', ascending=False).head(20).set_index('authors')
plt.figure(figsize=(15, 20))
ax = sns.barplot(x=best_books['title'], y=best_books.index, palette='inferno')
ax.set_title("The 20 of best books")
ax.set_xlabel('Number of books')

totals = []
for i in ax.patches:
  totals.append(i.get_width())

total = sum(totals)
for i in ax.patches:
  ax.text(i.get_width() + .2, i.get_y() + .2, str(round(i.get_width())), fontsize=15, color='black')

plt.show()

most_rated = dataset.sort_values('ratings_count', ascending = False).head(20).set_index('title')
plt.figure(figsize=(15,10))
ax = sns.barplot(x=most_rated['ratings_count'], y=most_rated.index, palette='inferno')
totals = []
for i in ax.patches:
    totals.append(i.get_width())
total = sum(totals)
for i in ax.patches:
    ax.text(i.get_width()+.2, i.get_y()+.2,str(round(i.get_width())), fontsize=15,color='black')
plt.show()

dataset.average_rating = dataset.average_rating.astype(float)
fig, ax = plt.subplots(figsize=[15,10])
sns.distplot(dataset['average_rating'],ax=ax)
ax.set_title('Average rating distribution for all books',fontsize=20)
ax.set_xlabel('Average rating',fontsize=13)

ax = sns.relplot(data=dataset, x="average_rating", y="ratings_count", color = 'red', sizes=(100, 200), height=7, marker='o')
plt.title("Relation between Rating counts and Average Ratings",fontsize = 15)
ax.set_axis_labels("Average Rating", "Ratings Count")

plt.figure(figsize=(15,10))
ax = sns.relplot(x="average_rating", y="  num_pages", data = dataset, color = 'red',sizes=(100, 200), height=7, marker='o')
ax.set_axis_labels("Average Rating", "Number of Pages")

dataset_copy = dataset

"""## Data Preparation"""

dataset_copy.loc[ (dataset_copy['average_rating'] >= 0) & (dataset_copy['average_rating'] <= 1), 'rating_between'] = "between 0 and 1"
dataset_copy.loc[ (dataset_copy['average_rating'] > 1) & (dataset_copy['average_rating'] <= 2), 'rating_between'] = "between 1 and 2"
dataset_copy.loc[ (dataset_copy['average_rating'] > 2) & (dataset_copy['average_rating'] <= 3), 'rating_between'] = "between 2 and 3"
dataset_copy.loc[ (dataset_copy['average_rating'] > 3) & (dataset_copy['average_rating'] <= 4), 'rating_between'] = "between 3 and 4"
dataset_copy.loc[ (dataset_copy['average_rating'] > 4) & (dataset_copy['average_rating'] <= 5), 'rating_between'] = "between 4 and 5"

rating_df = pd.get_dummies(dataset_copy['rating_between'])
language_df = pd.get_dummies(dataset_copy['language_code'])

features = pd.concat([rating_df,
                      language_df,
                      dataset_copy['average_rating'],
                      dataset_copy['ratings_count']], axis=1)

from sklearn.preprocessing import MinMaxScaler
mms = MinMaxScaler()
features = mms.fit_transform(features)

"""## Make the model with KNN"""

from sklearn.neighbors import NearestNeighbors

model = NearestNeighbors(n_neighbors=6, algorithm='ball_tree')
model.fit(features)
dist, idlist = model.kneighbors(features)

def BookRecommender(book_name):
    book_list_name = []
    book_id = dataset_copy[dataset_copy['title'] == book_name].index
    book_id = book_id[0]
    for newid in idlist[book_id]:
        book_list_name.append(dataset_copy.loc[newid].title)
    return book_list_name

BookNames = BookRecommender('Harry Potter and the Half-Blood Prince (Harry Potter  #6)')
BookNames